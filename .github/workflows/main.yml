# This is a basic workflow to help you get started with Actions

name: helloworld-lambda-cicd

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package
      - name: Upload shaded jar
        uses: actions/upload-artifact@v2
        with:
          name: jar
          path: target/helloworld-lambda-0.0.1-SNAPSHOT-aws.jar
  upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Make artifact directory
        run: mkdir -p ./artifacts/${{ github.repository }}

      - name: Download jar
        uses: actions/download-artifact@v2
        with:
          name: jar
          path: artifacts/${{ github.repository }}

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts/${{ github.repository }}

      - name: Rename jar
        run: |
          mv artifacts/${{ github.repository }}/helloworld-lambda-0.0.1-SNAPSHOT-aws.jar artifacts/${{ github.repository }}/${{ github.sha }}.jar

      - name: Push Zip to S3
        uses: jakejarvis/s3-sync-action@v0.3.1
        env:
          SOURCE_DIR: './artifacts'
          AWS_REGION: 'us-east-1'
          AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  deploy:
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "1.0.2"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      - name: Verify Terraform version
        run: terraform --version
        working-directory: tf
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init -input=false
        working-directory: tf
      - name: Terraform import existing role
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: import aws_iam_role.iam_for_helloWorld_lambda iam_for_helloWorld_lambda
          working-directory: tf
      - name: Terraform import existing log group
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            run: import aws_cloudwatch_log_group.helloWorld-logs /aws/lambda/helloWorld
            working-directory: tf
      - name: Terraform import existing iam policy
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            run: import aws_iam_policy.helloWorld-logs helloWorld_lambda_logging
            working-directory: tf
      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_s3_artifact_bucket: ${{ secrets.AWS_BUCKET_NAME }}
          TF_VAR_s3_artifact_key: ${{ github.repository }}/${{ github.sha }}.jar
        run: terraform apply -auto-approve -input=false
        working-directory: tf
